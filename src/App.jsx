import React, { useState, useEffect } from 'react';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { AlertTriangle, CheckCircle, XCircle, FileText, Download, Bell, Shield, CreditCard, Users, Activity, Menu, X } from 'lucide-react';

// Simple PDF generation function
const generatePDF = (title, content) => {
  const doc = `
${title}
${'='.repeat(title.length)}

Facility: ${facilityData.name}
Location: ${facilityData.location}
Generated: ${new Date().toLocaleDateString()}
Report Type: ${title}

${content}

---
This report was generated by the Healthcare Compliance Monitoring Dashboard
For questions, contact your compliance officer.
`;
  
  const blob = new Blob([doc], { type: 'text/plain' });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `${title.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
};

// CSV generation function
const generateCSV = (data, filename) => {
  const headers = Object.keys(data[0]).join(',');
  const rows = data.map(row => Object.values(row).join(',')).join('\n');
  const csv = `${headers}\n${rows}`;
  
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `${filename}_${new Date().toISOString().split('T')[0]}.csv`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  window.URL.revokeObjectURL(url);
};

// Mock data for demonstration
const facilityData = {
  name: "Lagos General Hospital",
  type: "Public Healthcare Facility",
  location: "Lagos, Nigeria",
  bedCount: 500,
  paymentChannels: ["Direct Payment", "HMO", "NHIS"],
  lastAudit: "2024-06-15"
};

const complianceData = {
  pciScore: 67,
  ndprScore: 78,
  overallScore: 73,
  lastUpdated: new Date().toISOString(),
  trends: [
    { month: 'Jan', pci: 65, ndpr: 75 },
    { month: 'Feb', pci: 68, ndpr: 76 },
    { month: 'Mar', pci: 66, ndpr: 77 },
    { month: 'Apr', pci: 67, ndpr: 78 },
  ]
};

const violationsData = [
  {
    id: 1,
    type: "PCI DSS",
    severity: "Critical",
    description: "Cardholder data stored in plain text",
    location: "HMO processing module, Hygeia transactions",
    timestamp: "2024-08-02T14:15:00Z",
    impact: "247 transactions affected, NDPR fine risk: ₦12M",
    status: "Open"
  },
  {
    id: 2,
    type: "NDPR",
    severity: "Warning",
    description: "Patient consent records incomplete",
    location: "Direct payment processing",
    timestamp: "2024-08-02T09:30:00Z",
    impact: "47 patient records affected",
    status: "In Progress"
  },
  {
    id: 3,
    type: "PCI DSS",
    severity: "Medium",
    description: "SSL certificate expires in 7 days",
    location: "Payment gateway",
    timestamp: "2024-08-01T16:45:00Z",
    impact: "Payment processing may be interrupted",
    status: "Scheduled"
  }
];

const paymentChannelData = [
  { name: 'Direct Payment', value: 45, compliance: 85 },
  { name: 'HMO', value: 35, compliance: 62 },
  { name: 'NHIS', value: 20, compliance: 78 }
];

const COLORS = {
  Critical: '#ef4444',
  Warning: '#f59e0b',
  Medium: '#3b82f6',
  Success: '#10b981'
};

const ComplianceScore = ({ title, score, framework }) => {
  const getScoreColor = (score) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 75) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getBackgroundColor = (score) => {
    if (score >= 90) return 'bg-green-100';
    if (score >= 75) return 'bg-yellow-100';
    return 'bg-red-100';
  };

  return (
    <div className={`p-6 rounded-lg border ${getBackgroundColor(score)}`}>
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
          <p className="text-sm text-gray-600">{framework}</p>
        </div>
        <div className="text-right">
          <div className={`text-3xl font-bold ${getScoreColor(score)}`}>
            {score}%
          </div>
          <div className="text-sm text-gray-500">Compliance Score</div>
        </div>
      </div>
    </div>
  );
};

const AlertItem = ({ violation }) => {
  const getSeverityIcon = (severity) => {
    switch (severity) {
      case 'Critical':
        return <XCircle className="h-5 w-5 text-red-500" />;
      case 'Warning':
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      default:
        return <AlertTriangle className="h-5 w-5 text-blue-500" />;
    }
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'Critical':
        return 'border-l-red-500 bg-red-50';
      case 'Warning':
        return 'border-l-yellow-500 bg-yellow-50';
      default:
        return 'border-l-blue-500 bg-blue-50';
    }
  };

  return (
    <div className={`border-l-4 p-4 ${getSeverityColor(violation.severity)}`}>
      <div className="flex items-start">
        <div className="flex-shrink-0">
          {getSeverityIcon(violation.severity)}
        </div>
        <div className="ml-3 flex-1">
          <div className="flex items-center justify-between">
            <h4 className="text-sm font-medium text-gray-900">
              {violation.type} - {violation.severity}
            </h4>
            <span className="text-xs text-gray-500">
              {new Date(violation.timestamp).toLocaleString()}
            </span>
          </div>
          <p className="mt-1 text-sm text-gray-700">{violation.description}</p>
          <p className="mt-1 text-xs text-gray-600">
            <strong>Location:</strong> {violation.location}
          </p>
          <p className="mt-1 text-xs text-gray-600">
            <strong>Impact:</strong> {violation.impact}
          </p>
        </div>
      </div>
    </div>
  );
};

const ReportCard = ({ title, description, type, onClick }) => {
  return (
    <div 
      className="p-4 border rounded-lg hover:bg-gray-50 cursor-pointer transition-colors"
      onClick={onClick}
    >
      <div className="flex items-center justify-between">
        <div>
          <h4 className="font-medium text-gray-900">{title}</h4>
          <p className="text-sm text-gray-600">{description}</p>
        </div>
        <div className="flex items-center space-x-2">
          <FileText className="h-5 w-5 text-gray-400" />
          <Download className="h-5 w-5 text-blue-500" />
        </div>
      </div>
    </div>
  );
};

export default function ComplianceDashboard() {
  const [activeTab, setActiveTab] = useState('overview');
  const [notifications, setNotifications] = useState(violationsData.length);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  
  // Assessment state
  const [pciAnswers, setPciAnswers] = useState({
    firewall: false,
    encryption: false,
    masking: false,
    segmentation: false,
    vulnScans: false,
    accessControl: false,
    monitoring: false,
    policies: false,
    training: false,
    testing: false
  });
  
  const [ndprAnswers, setNdprAnswers] = useState({
    consent: false,
    withdrawal: false,
    dataEncryption: false,
    accessControls: false,
    dpoAppointed: false,
    privacyPolicies: false,
    staffTraining: false,
    dataSubjectRights: false,
    breachProcedures: false,
    auditTrails: false
  });
  
  const [calculatedScores, setCalculatedScores] = useState({
    pci: complianceData.pciScore,
    ndpr: complianceData.ndprScore,
    overall: complianceData.overallScore
  });

  const calculatePCIScore = () => {
    const pciQuestions = [
      { key: 'firewall', points: 10, category: 'Network Security' },
      { key: 'segmentation', points: 8, category: 'Network Security' },
      { key: 'encryption', points: 15, category: 'Data Protection' },
      { key: 'masking', points: 10, category: 'Data Protection' },
      { key: 'accessControl', points: 12, category: 'Access Control' },
      { key: 'monitoring', points: 10, category: 'Monitoring' },
      { key: 'vulnScans', points: 8, category: 'Vulnerability Management' },
      { key: 'policies', points: 7, category: 'Policies' },
      { key: 'training', points: 10, category: 'Training' },
      { key: 'testing', points: 10, category: 'Testing' }
    ];
    
    const totalPoints = pciQuestions.reduce((sum, q) => sum + (pciAnswers[q.key] ? q.points : 0), 0);
    return Math.round(totalPoints);
  };

  const calculateNDPRScore = () => {
    const ndprQuestions = [
      { key: 'consent', points: 15, category: 'Consent Management' },
      { key: 'withdrawal', points: 10, category: 'Consent Management' },
      { key: 'dataEncryption', points: 12, category: 'Data Security' },
      { key: 'accessControls', points: 13, category: 'Data Security' },
      { key: 'dpoAppointed', points: 10, category: 'Governance' },
      { key: 'privacyPolicies', points: 8, category: 'Documentation' },
      { key: 'staffTraining', points: 8, category: 'Training' },
      { key: 'dataSubjectRights', points: 12, category: 'Individual Rights' },
      { key: 'breachProcedures', points: 7, category: 'Incident Management' },
      { key: 'auditTrails', points: 5, category: 'Monitoring' }
    ];
    
    const totalPoints = ndprQuestions.reduce((sum, q) => sum + (ndprAnswers[q.key] ? q.points : 0), 0);
    return Math.round(totalPoints);
  };

  const handleCalculateScores = () => {
    const newPciScore = calculatePCIScore();
    const newNdprScore = calculateNDPRScore();
    const newOverallScore = Math.round((newPciScore + newNdprScore) / 2);
    
    setCalculatedScores({
      pci: newPciScore,
      ndpr: newNdprScore,
      overall: newOverallScore
    });
    
    // Update the compliance data for other tabs
    complianceData.pciScore = newPciScore;
    complianceData.ndprScore = newNdprScore;
    complianceData.overallScore = newOverallScore;
    
    alert(`Scores Updated!\nPCI DSS: ${newPciScore}%\nNDPR: ${newNdprScore}%\nOverall: ${newOverallScore}%`);
  };

  const generateReport = (type) => {
    let content = '';
    
    switch (type) {
      case 'PCI DSS Compliance Report':
        content = `
EXECUTIVE SUMMARY
Current PCI DSS Compliance Score: ${complianceData.pciScore}%
Status: ${complianceData.pciScore >= 80 ? 'COMPLIANT' : 'NON-COMPLIANT'}

PAYMENT CHANNELS ANALYSIS
- Direct Payment: 85% compliant
- HMO Processing: 62% compliant (NEEDS ATTENTION)
- NHIS Transactions: 78% compliant

CRITICAL FINDINGS
${violationsData.filter(v => v.type === 'PCI DSS').map(v => 
  `- ${v.severity}: ${v.description}\n  Location: ${v.location}\n  Impact: ${v.impact}`
).join('\n\n')}

RECOMMENDATIONS
1. Implement proper encryption for HMO payment processing
2. Update SSL certificates before expiration
3. Conduct quarterly vulnerability assessments
4. Enhance access controls for payment systems

COMPLIANCE REQUIREMENTS STATUS
- Secure Network: PARTIAL
- Cardholder Data Protection: FAILED
- Vulnerability Management: IN PROGRESS
- Access Control: NEEDS IMPROVEMENT
- Network Monitoring: COMPLIANT
- Information Security Policy: COMPLIANT
`;
        break;
        
      case 'NDPR Compliance Report':
        content = `
EXECUTIVE SUMMARY
Current NDPR Compliance Score: ${complianceData.ndprScore}%
Status: ${complianceData.ndprScore >= 80 ? 'COMPLIANT' : 'REQUIRES ATTENTION'}

DATA PROTECTION ASSESSMENT
Patient Records Processing: 82% compliant
Consent Management: 75% compliant
Data Subject Rights: 85% compliant
Security Measures: 70% compliant

VIOLATIONS IDENTIFIED
${violationsData.filter(v => v.type === 'NDPR').map(v => 
  `- ${v.severity}: ${v.description}\n  Location: ${v.location}\n  Impact: ${v.impact}`
).join('\n\n')}

RECOMMENDATIONS
1. Complete patient consent documentation
2. Implement data protection impact assessments
3. Enhance staff training on data protection
4. Update privacy policies and procedures

REGULATORY REQUIREMENTS STATUS
- Lawful Basis for Processing: COMPLIANT
- Consent Mechanisms: NEEDS IMPROVEMENT
- Data Subject Rights: COMPLIANT
- Data Protection Officer: APPOINTED
- Breach Notification: PROCEDURES IN PLACE
- International Transfers: NOT APPLICABLE
`;
        break;
        
      case 'HMO Payment Channel Analysis':
        content = `
HMO PAYMENT PROCESSING ANALYSIS
Current HMO Compliance Score: 62%
Transaction Volume: 35% of total payments
Partner HMOs: Hygeia, AXA Mansard, AIICO Health

COMPLIANCE BREAKDOWN BY HMO
- Hygeia HMO: 58% compliant (CRITICAL ISSUES)
- AXA Mansard: 67% compliant
- AIICO Health: 65% compliant

CRITICAL ISSUES IDENTIFIED
1. Cardholder data encryption missing in Hygeia transactions
2. Delayed authorization processing
3. Incomplete audit trails for HMO reimbursements
4. Missing patient consent records

FINANCIAL IMPACT
- Potential NDPR fines: ₦12M
- Processing delays affecting cash flow
- 247 transactions at risk

ACTION PLAN
1. Immediate encryption implementation for Hygeia channel
2. Review and update HMO processing procedures
3. Implement real-time monitoring for HMO transactions
4. Conduct partner HMO compliance audits
`;
        break;
        
      case 'Executive Summary':
        content = `
EXECUTIVE DASHBOARD SUMMARY
Overall Compliance Health: ${complianceData.overallScore}%
Last Assessment: ${new Date().toLocaleDateString()}

KEY METRICS
- PCI DSS Compliance: ${complianceData.pciScore}%
- NDPR Compliance: ${complianceData.ndprScore}%
- Active Violations: ${violationsData.length}
- Critical Issues: ${violationsData.filter(v => v.severity === 'Critical').length}

PAYMENT CHANNEL PERFORMANCE
- Direct Payments: 45% volume, 85% compliant
- HMO Processing: 35% volume, 62% compliant ⚠️
- NHIS Transactions: 20% volume, 78% compliant

TOP PRIORITIES
1. Address critical encryption issues in HMO processing
2. Complete NDPR consent documentation
3. Update SSL certificates before expiration
4. Enhance staff compliance training

RISK ASSESSMENT
Current Risk Level: MEDIUM-HIGH
Primary Concerns: Data encryption, consent management
Estimated Financial Exposure: ₦12M in potential fines

BOARD RECOMMENDATIONS
1. Approve immediate investment in encryption infrastructure
2. Engage external compliance consultancy for HMO processes
3. Implement quarterly compliance review meetings
4. Establish compliance budget for 2024-2025
`;
        break;
        
      default:
        content = 'Report content not available.';
    }
    
    generatePDF(type, content);
  };

  const tabs = [
    { id: 'overview', name: 'Overview', icon: Activity },
    { id: 'assessment', name: 'Assessment', icon: Shield },
    { id: 'violations', name: 'Violations', icon: AlertTriangle },
    { id: 'reports', name: 'Reports', icon: FileText },
    { id: 'settings', name: 'Settings', icon: CreditCard }
  ];

  return (
    <div className="min-h-screen bg-gray-100 min-w-full relative">
      {/* Overlay for mobile menu */}
      {mobileMenuOpen && (
        <div 
          className="fixed inset-0  bg-transparent z-40 sm:hidden"
          onClick={() => setMobileMenuOpen(false)}
        />
      )}

      {/* Header */}
      <header className="bg-white shadow-sm border-b min-w-full">
        <div className="w-full px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-5">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Healthcare Compliance Monitor</h1>
              <p className="text-sm text-gray-600">{facilityData.name} - {facilityData.type}</p>
            </div>
            <div className="flex items-center space-x-4">
              <div className="relative">
                <Bell className="h-6 w-6 text-gray-500" />
                {notifications > 0 && (
                  <span className="absolute -top-2 -right-2 h-4 w-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                    {notifications}
                  </span>
                )}
              </div>
              <div className="text-sm text-gray-500">
                Last updated: {new Date(complianceData.lastUpdated).toLocaleString()}
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <nav className="bg-white border-b">
        <div className="w-full px-4 sm:px-6 lg:px-8">
          {/* Desktop Navigation */}
          <div className="hidden md:flex space-x-8">
            {tabs.map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                    activeTab === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <Icon className="h-4 w-4" />
                  <span>{tab.name}</span>
                </button>
              );
            })}
          </div>

          {/* Tablet Navigation - Horizontal Scroll */}
          <div className="hidden sm:flex md:hidden overflow-x-auto scrollbar-hide py-2">
            <div className="flex space-x-6 min-w-max px-2">
              {tabs.map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`py-3 px-4 rounded-lg font-medium text-sm flex items-center space-x-2 whitespace-nowrap ${
                      activeTab === tab.id
                        ? 'bg-blue-100 text-blue-600'
                        : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                    }`}
                  >
                    <Icon className="h-4 w-4" />
                    <span>{tab.name}</span>
                  </button>
                );
              })}
            </div>
          </div>

          {/* Mobile Navigation */}
          <div className="sm:hidden relative">
            <div className="flex items-center justify-between py-3">
              <div className="flex items-center space-x-2">
                {tabs.find(tab => tab.id === activeTab) && (
                  <>
                    {React.createElement(tabs.find(tab => tab.id === activeTab).icon, { className: "h-5 w-5 text-blue-600" })}
                    <span className="font-medium text-gray-900">
                      {tabs.find(tab => tab.id === activeTab).name}
                    </span>
                  </>
                )}
              </div>
              <button
                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
                className="p-2 rounded-md text-gray-500 hover:text-gray-700 hover:bg-gray-100"
              >
                {mobileMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
              </button>
            </div>

            {/* Mobile Dropdown Menu */}
            {mobileMenuOpen && (
              <div className="absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-b-lg shadow-xl z-50">
                <div className="px-4 py-3 space-y-1">
                  {tabs.map((tab) => {
                    const Icon = tab.icon;
                    return (
                      <button
                        key={tab.id}
                        onClick={() => {
                          setActiveTab(tab.id);
                          setMobileMenuOpen(false);
                        }}
                        className={`w-full text-left py-3 px-3 rounded-md font-medium text-sm flex items-center space-x-3 transition-colors ${
                          activeTab === tab.id
                            ? 'bg-blue-100 text-blue-600'
                            : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'
                        }`}
                      >
                        <Icon className="h-5 w-5" />
                        <span>{tab.name}</span>
                      </button>
                    );
                  })}
                </div>
              </div>
            )}
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="w-full px-4 sm:px-6 lg:px-8 py-6">
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Compliance Scores */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <ComplianceScore 
                title="PCI DSS Compliance" 
                score={calculatedScores.pci} 
                framework="Payment Card Industry Data Security Standard"
              />
              <ComplianceScore 
                title="NDPR Compliance" 
                score={calculatedScores.ndpr} 
                framework="Nigeria Data Protection Regulation"
              />
              <div className="p-6 rounded-lg border bg-blue-50">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">Overall Score</h3>
                    <p className="text-sm text-gray-600">Combined Compliance</p>
                  </div>
                  <div className="text-right">
                    <div className="text-3xl font-bold text-blue-600">
                      {calculatedScores.overall}%
                    </div>
                    <div className="text-sm text-gray-500">Health Score</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Payment Channels */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-4">Payment Channel Distribution</h3>
                <ResponsiveContainer width="100%" height={250}>
                  <PieChart>
                    <Pie
                      data={paymentChannelData}
                      cx="50%"
                      cy="50%"
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, value }) => `${name}: ${value}%`}
                    >
                      {paymentChannelData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={Object.values(COLORS)[index]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>

              <div className="bg-white p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-4">Compliance Trends</h3>
                <ResponsiveContainer width="100%" height={250}>
                  <LineChart data={complianceData.trends}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="pci" stroke="#ef4444" name="PCI DSS" />
                    <Line type="monotone" dataKey="ndpr" stroke="#3b82f6" name="NDPR" />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Recent Violations */}
            <div className="bg-white rounded-lg shadow">
              <div className="p-6 border-b">
                <h3 className="text-lg font-semibold">Recent Violations</h3>
              </div>
              <div className="p-6 space-y-4">
                {violationsData.slice(0, 3).map((violation) => (
                  <AlertItem key={violation.id} violation={violation} />
                ))}
                <div className="text-center">
                  <button 
                    onClick={() => setActiveTab('violations')}
                    className="text-blue-600 hover:text-blue-800 font-medium"
                  >
                    View All Violations →
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'assessment' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow">
              <div className="p-6 border-b">
                <h3 className="text-lg font-semibold">Compliance Assessment</h3>
                <p className="text-sm text-gray-600">Answer the questions below to calculate your facility's compliance scores</p>
              </div>
              
              <div className="p-6 space-y-8">
                {/* PCI DSS Assessment */}
                <div className="border rounded-lg p-6 bg-red-50">
                  <h4 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                    <Shield className="h-5 w-5 mr-2 text-red-600" />
                    PCI DSS Assessment (Payment Card Industry Data Security Standard)
                  </h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Network Security */}
                    <div className="space-y-3">
                      <h5 className="font-medium text-gray-800">Network Security (18 points)</h5>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.firewall}
                          onChange={(e) => setPciAnswers({...pciAnswers, firewall: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Firewall properly configured (10 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.segmentation}
                          onChange={(e) => setPciAnswers({...pciAnswers, segmentation: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Network segmentation in place (8 pts)</span>
                      </label>
                    </div>
                    
                    {/* Data Protection */}
                    <div className="space-y-3">
                      <h5 className="font-medium text-gray-800">Data Protection (25 points)</h5>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.encryption}
                          onChange={(e) => setPciAnswers({...pciAnswers, encryption: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Cardholder data encrypted (15 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.masking}
                          onChange={(e) => setPciAnswers({...pciAnswers, masking: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Card data properly masked (10 pts)</span>
                      </label>
                    </div>
                    
                    {/* Access Control */}
                    <div className="space-y-3">
                      <h5 className="font-medium text-gray-800">Access Control (12 points)</h5>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.accessControl}
                          onChange={(e) => setPciAnswers({...pciAnswers, accessControl: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Strong access controls implemented (12 pts)</span>
                      </label>
                    </div>
                    
                    {/* Monitoring & Testing */}
                    <div className="space-y-3">
                      <h5 className="font-medium text-gray-800">Monitoring & Security (37 points)</h5>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.monitoring}
                          onChange={(e) => setPciAnswers({...pciAnswers, monitoring: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Network monitoring active (10 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.vulnScans}
                          onChange={(e) => setPciAnswers({...pciAnswers, vulnScans: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Quarterly vulnerability scans (8 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.policies}
                          onChange={(e) => setPciAnswers({...pciAnswers, policies: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Security policies documented (7 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.training}
                          onChange={(e) => setPciAnswers({...pciAnswers, training: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Staff security training completed (10 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={pciAnswers.testing}
                          onChange={(e) => setPciAnswers({...pciAnswers, testing: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Regular security testing (10 pts)</span>
                      </label>
                    </div>
                  </div>
                  
                  <div className="mt-4 p-3 bg-red-100 rounded">
                    <p className="text-sm font-medium">Current PCI DSS Score: {calculatePCIScore()}% (Max: 100%)</p>
                  </div>
                </div>

                {/* NDPR Assessment */}
                <div className="border rounded-lg p-6 bg-blue-50">
                  <h4 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                    <Shield className="h-5 w-5 mr-2 text-blue-600" />
                    NDPR Assessment (Nigeria Data Protection Regulation)
                  </h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Consent Management */}
                    <div className="space-y-3">
                      <h5 className="font-medium text-gray-800">Consent Management (25 points)</h5>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.consent}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, consent: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Patient consent forms complete (15 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.withdrawal}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, withdrawal: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Consent withdrawal process (10 pts)</span>
                      </label>
                    </div>
                    
                    {/* Data Security */}
                    <div className="space-y-3">
                      <h5 className="font-medium text-gray-800">Data Security (25 points)</h5>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.dataEncryption}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, dataEncryption: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Personal data encrypted (12 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.accessControls}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, accessControls: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Access controls implemented (13 pts)</span>
                      </label>
                    </div>
                    
                    {/* Governance & Documentation */}
                    <div className="space-y-3">
                      <h5 className="font-medium text-gray-800">Governance (18 points)</h5>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.dpoAppointed}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, dpoAppointed: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Data Protection Officer appointed (10 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.privacyPolicies}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, privacyPolicies: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Privacy policies documented (8 pts)</span>
                      </label>
                    </div>
                    
                    {/* Rights & Training */}
                    <div className="space-y-3">
                      <h5 className="font-medium text-gray-800">Rights & Procedures (32 points)</h5>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.staffTraining}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, staffTraining: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Staff training on data protection (8 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.dataSubjectRights}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, dataSubjectRights: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Data subject rights procedures (12 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.breachProcedures}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, breachProcedures: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Breach notification procedures (7 pts)</span>
                      </label>
                      <label className="flex items-center space-x-3">
                        <input 
                          type="checkbox" 
                          checked={ndprAnswers.auditTrails}
                          onChange={(e) => setNdprAnswers({...ndprAnswers, auditTrails: e.target.checked})}
                          className="w-4 h-4 text-blue-600"
                        />
                        <span className="text-sm">Audit trails maintained (5 pts)</span>
                      </label>
                    </div>
                  </div>
                  
                  <div className="mt-4 p-3 bg-blue-100 rounded">
                    <p className="text-sm font-medium">Current NDPR Score: {calculateNDPRScore()}% (Max: 100%)</p>
                  </div>
                </div>

                {/* Calculate Button */}
                <div className="text-center">
                  <button 
                    onClick={handleCalculateScores}
                    className="bg-green-600 text-white px-8 py-3 rounded-lg hover:bg-green-700 font-medium text-lg"
                  >
                    Calculate Compliance Scores
                  </button>
                  <p className="text-sm text-gray-600 mt-2">
                    This will update your compliance scores across all tabs
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'violations' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow">
              <div className="p-6 border-b">
                <h3 className="text-lg font-semibold">All Compliance Violations</h3>
                <p className="text-sm text-gray-600">Monitor and track compliance issues across all payment channels</p>
              </div>
              <div className="p-6 space-y-4">
                {violationsData.map((violation) => (
                  <AlertItem key={violation.id} violation={violation} />
                ))}
                <div className="mt-6 pt-4 border-t">
                  <button 
                    onClick={() => generateCSV(violationsData.map(v => ({
                      Type: v.type,
                      Severity: v.severity,
                      Description: v.description,
                      Location: v.location,
                      Timestamp: new Date(v.timestamp).toLocaleString(),
                      Status: v.status
                    })), 'Violations_Export')}
                    className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 flex items-center space-x-2"
                  >
                    <Download className="h-4 w-4" />
                    <span>Export Violations to CSV</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'reports' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow">
              <div className="p-6 border-b">
                <h3 className="text-lg font-semibold">Compliance Reports</h3>
                <p className="text-sm text-gray-600">Generate and download compliance reports for regulatory audits</p>
              </div>
              <div className="p-6 space-y-4">
                <ReportCard
                  title="PCI DSS Compliance Report"
                  description="Comprehensive assessment of payment card data security compliance"
                  type="PCI DSS"
                  onClick={() => generateReport('PCI DSS Compliance Report')}
                />
                <ReportCard
                  title="NDPR Compliance Report"
                  description="Data protection regulation compliance assessment and audit trail"
                  type="NDPR"
                  onClick={() => generateReport('NDPR Compliance Report')}
                />
                <ReportCard
                  title="HMO Payment Channel Analysis"
                  description="Detailed analysis of HMO payment processing compliance status"
                  type="HMO Analysis"
                  onClick={() => generateReport('HMO Payment Channel Analysis')}
                />
                <ReportCard
                  title="Executive Summary"
                  description="High-level compliance overview for management and board reporting"
                  type="Executive"
                  onClick={() => generateReport('Executive Summary')}
                />
              </div>
            </div>
          </div>
        )}

        {activeTab === 'settings' && (
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow">
              <div className="p-6 border-b">
                <h3 className="text-lg font-semibold">Facility Configuration</h3>
                <p className="text-sm text-gray-600">Configure compliance monitoring settings for your healthcare facility</p>
              </div>
              <div className="p-6 space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Facility Name</label>
                    <input 
                      type="text" 
                      value={facilityData.name}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                      readOnly
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Facility Type</label>
                    <input 
                      type="text" 
                      value={facilityData.type}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                      readOnly
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Location</label>
                    <input 
                      type="text" 
                      value={facilityData.location}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                      readOnly
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Bed Count</label>
                    <input 
                      type="number" 
                      value={facilityData.bedCount}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                      readOnly
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Payment Channels</label>
                  <div className="space-y-2">
                    {facilityData.paymentChannels.map((channel) => (
                      <div key={channel} className="flex items-center">
                        <input type="checkbox" checked readOnly className="mr-2" />
                        <span className="text-sm text-gray-700">{channel}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}